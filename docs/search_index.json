[["r---introduction.html", "R Course Chapter 1 R - Introduction 1.1 R - Basic Concepts and applications 1.2 Why R? 1.3 R studio 1.4 Basic Mathematics like operators 1.5 R Markdown", " R Course YOUR NAME HERE 2024-04-18 Chapter 1 R - Introduction 1.1 R - Basic Concepts and applications R (programming language) is a language and environment for statistical computing and graphics &lt;– logo image for Rstudio –&gt; 1.2 Why R? Developed by Statisticians - R is Excellent for Statistical Computing and Analysis Open-source (Free) - R is an open-source programming language. Anyone can work with R without any license or fee. Due to this, R has a huge community that contributes to its environment. A Large Variety of Specialized Libraries - These libraries support and enhance the R development environment. R Studio - A graphic user interface to R - easier to grasp and learn. Cross-platform Support - R is machine-independent. It supports the cross-platform operation. Thus, it is usable on many different operating systems. Can do Data Cleansing, Data Wrangling, and Web Scraping - R can collect data from the internet through web scraping and other means. It can also perform data cleansing. R is also useful for data wrangling which is the process of converting raw data into the desired format for easier consumption. Powerful Graphics - R has extensive libraries that can produce production quality graphs and visualizations. Compatible with other Programming Languages - R is compatible with other languages like C, C++, and FORTRAN. Other languages like .NET, Java, Python can also directly manipulate objects. Compatible with high performance computing and Big Data Analytics. 1.3 R studio Rstudio is an integrated development environment(IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution as well as tools for plotting history, debugging and work space management. RStudio - installation link &lt;-link in the first 7 minutes-&gt; Outline the process of creating and running R script - a screenshot &lt;–Check R Version –&gt; 1.3.1 R - Look and Feel &lt;– R screenshot image from the terminal–&gt; &lt;– default screenshot image for R Studio –&gt; explain each section/quadrant - text editor - stand input/output (console/terminal/jobs) - all data and its properties quadrants - plots and file directory structure 1.4 Basic Mathematics like operators Addition - the + operator is used to add two or more values 2+3 ## [1] 5 Subtraction - the - operator is used to subtract two numerical values 6-2 ## [1] 4 &lt;– add more content for operators–&gt; 1.5 R Markdown &lt;– Definition of R Markdown –&gt; &lt;–Introduce how to create R markdown file using screenshots –&gt; Each chunk can be run separately in a single file, also the variable in one chunk can be reused by the next/later chunks Anything added outside the chuck will not be executed in the program The R markdown can be knitted to a html, pdf, or word file &lt;–Include screenshots–&gt; "],["data-types-and-data-structures.html", "Chapter 2 Data Types and Data Structures 2.1 Data types 2.2 Data Structures", " Chapter 2 Data Types and Data Structures 2.1 Data types &lt;– add more explanations to each data types –&gt; Numeric a=23.5 class(a) #check the data type of a ## [1] &quot;numeric&quot; Integers a=23L #add L to show it is an integer class(a) ## [1] &quot;integer&quot; Characters a=&quot;DNA&quot; class(a) ## [1] &quot;character&quot; Logical a=TRUE #logical data types is either TRUE or FALSE only class(a) ## [1] &quot;logical&quot; Complex, a=2+3i # Complex data types have &#39;i&#39; at the end of each number class(a) ## [1] &quot;complex&quot; Raw a=charToRaw(&quot;DNA&quot;) print(a) ## [1] 44 4e 41 class(a) ## [1] &quot;raw&quot; # convert back to character b=rawToChar(a) class(b) ## [1] &quot;character&quot; 2.2 Data Structures This is the organization of data into one or multiple data values in specific structures. Different types of data structures in R include; - Vector - Matrix - Data frame 2.2.1 Vector A vector is a single entity consisting of a collection of things. Here is an example of a vector. marks = c(23, 67, 98, 34, 98, 21) print(marks) ## [1] 23 67 98 34 98 21 The class function is utilized to determine the data types present within vector data values. class(marks) ## [1] &quot;numeric&quot; The vector “marks” consist of only numeric values is.vector function is used to check if the variable is a vector is.vector(marks) ## [1] TRUE unlike matrix and data frame, vector has no dimension dim(marks) ## NULL length() function is used to count number of elements in vectors length(marks) ## [1] 6 Index is the position of an element in a vector, in R it starts at index 1 - lets say we find the third element by index 3 marks[3] ## [1] 98 value “98” is at index 3, or the third in the vector. Vectors can be sliced to obtain values over a range of indices. For instance the code below shows how to retrieve the from the second to the fourth values as a vector print(marks[2:4]) ## [1] 67 98 34 is.vector(marks[2:4]) # confirm if the retrieved values are in a vector ## [1] TRUE An element at a specific index in a vector can be excluded by adding a - sign before the index value. marks[-2] #exclude the element at index 2 ## [1] 23 98 34 98 21 rev() command is used to reverse the order of elements in a vector rev(marks) ## [1] 21 98 34 98 67 23 2.2.1.1 Mathematical Operations in a vector The summary/descriptive statistics are calculated by summary() command. summary(marks) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 21.00 25.75 50.50 56.83 90.25 98.00 sum(), median(), and mean() are used to calculate the total, median, average and the standard deviation of the values in a vector print(&quot;MARKS&quot;) ## [1] &quot;MARKS&quot; print(paste(&quot;TOTAL: &quot;, sum(marks))) ## [1] &quot;TOTAL: 341&quot; print(paste(&quot;MEDIAN: &quot;, median(marks))) ## [1] &quot;MEDIAN: 50.5&quot; print(paste(&quot;AVERAGE: &quot;, mean(marks))) ## [1] &quot;AVERAGE: 56.8333333333333&quot; vector multiplication double_marks =2 * marks marks ## [1] 23 67 98 34 98 21 double_marks ## [1] 46 134 196 68 196 42 Vector division - divide the marks by 2 half_marks = marks/2 half_marks ## [1] 11.5 33.5 49.0 17.0 49.0 10.5 Multiply 2 vectors of equal length a = c(3, 5, 1) b = c(7, 3, 9) ab = a*b ab ## [1] 21 15 9 ba = b*a # is the same as ab ba ## [1] 21 15 9 Divide 2 vectors of equal length # Divide vector a by b abdiv=a/b abdiv ## [1] 0.4285714 1.6666667 0.1111111 # Divide vector b by a badiv=b/a badiv ## [1] 2.333333 0.600000 9.000000 However, when multiplying vectors of unequal length the shorter one is replicated to match the longer vector. It will then return a warning e=c(1,2,3,4,5) f=c(1,2) ef = e*f #it shows an error ## Warning in e * f: longer object length is not a multiple of shorter object ## length ef #shows results since f is replicated to match e as f=c(1,2,1,2,1) ## [1] 1 4 3 8 5 Multiple vectors can be concatenated/combined to come up with one giant vector a ## [1] 3 5 1 b ## [1] 7 3 9 z=c(a,b,a) #concatenates the vectors z ## [1] 3 5 1 7 3 9 3 5 1 2.2.1.2 Character Vectors Vectors can also contain character data types for instance my_name = c(&quot;My&quot;, &quot;name&quot;, &quot;is&quot;, &quot;Vipin&quot;) my_name[5] = &quot;Singh&quot; #insert at the end my_name ## [1] &quot;My&quot; &quot;name&quot; &quot;is&quot; &quot;Vipin&quot; &quot;Singh&quot; Combining the vectors to a single string print(paste(my_name, collapse=&quot; &quot;)) ## [1] &quot;My name is Vipin Singh&quot; Calculate the summary/descriptive statistics of the vector by function summary(). It finds; - Count/length - Class (data type) - Mode summary(my_name) ## Length Class Mode ## 5 character character 2.2.1.3 Vectors with mixed data types A vector can also consist of characters values and numeric values for instance numbers=c(1,&quot;two&quot;, 3, &quot;three&quot;) numbers ## [1] &quot;1&quot; &quot;two&quot; &quot;3&quot; &quot;three&quot; however the numeric elements in the vector are recognized by R as character data type. They can be converted to numeric by; as.numeric(numbers[1]) + 2 ## [1] 3 the integers can be converted by; as.integer(numbers[1]) ## [1] 1 2.2.1.4 Named Vectors Variable names can be assigned to vectors like; named_vector=c(EcoR1=&quot;GAATTC&quot;, HindIII=&quot;AAGCTT&quot;, Pst1=&quot;CTGCAG&quot;) named_vector ## EcoR1 HindIII Pst1 ## &quot;GAATTC&quot; &quot;AAGCTT&quot; &quot;CTGCAG&quot; to access the names of the values is; names(named_vector) ## [1] &quot;EcoR1&quot; &quot;HindIII&quot; &quot;Pst1&quot; A vector element can be accessed using its name named_vector[&quot;EcoR1&quot;] # find the value of a vector by its name ## EcoR1 ## &quot;GAATTC&quot; 2.2.1.5 Generating number series as vectors The seq function in R is used to generate sequences of numbers. It takes several arguments, including from, to, by, and length.out, among others, to specify the range and increment of the sequence. Here’s a brief overview of its usage: from: The starting value of the sequence. to: The end value of the sequence. # Generate a sequence from 1 to 10 series = seq(from=1, to=20) series ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # It can also be written as series = seq(1,20) series ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class(series) ## [1] &quot;integer&quot; by: The increment between consecutive values in the sequence. # generate numbers 0 to 10 incremented by 0.5 series3=seq(0, 10, by=0.5) series3 ## [1] 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 ## [16] 7.5 8.0 8.5 9.0 9.5 10.0 length: The desired length of the sequence. # generate 10 numbers from 0 to 6 series4=seq(0, 6, length=10) series4 ## [1] 0.0000000 0.6666667 1.3333333 2.0000000 2.6666667 3.3333333 4.0000000 ## [8] 4.6666667 5.3333333 6.0000000 seq(0, 6) ## [1] 0 1 2 3 4 5 6 along.with: An optional vector argument specifying the length and names of the output sequence. # Generate a sequence along with a vector seq(along.with = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) ## [1] 1 2 3 2.2.1.6 Null data points in vectors NA data (Not available or blank) for instance marks=c(78,65, 98, 87, 89, NA) sum(is.na(marks)) #Count the null values in a vector ## [1] 1 Other inbuilt functions for mathematical operations cannot be done if Null values exists in a vector unless they are removed/ignored #sum(marks) #returns an error sum(marks, na.rm = TRUE) #remove null values before calculating the sum ## [1] 417 median(marks, na.rm = TRUE) ## [1] 87 summary(marks, na.rm = TRUE) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 65.0 78.0 87.0 83.4 89.0 98.0 1 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
